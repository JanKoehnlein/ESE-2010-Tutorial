/*
 * generated by Xtext
 */
package org.eclipse.ese.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.jface.viewers.ILabelProvider;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.ui.editor.contentassist.PrefixMatcher;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class AndroidProposalProvider extends AbstractAndroidProposalProvider {

	@Inject
	private ILabelProvider labelProvider;

	public void complete_ID(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (doCreateIdProposals()) {
			final PrefixMatcher oldMatcher = context.getMatcher();
			try {
				PrefixMatcher newMatcher = new PrefixMatcher() {
					@Override
					public boolean isCandidateMatchingPrefix(String name,
							String prefix) {
						String strippedName = name;
						if (name.startsWith("^") && !prefix.startsWith("^")) {
							strippedName = name.substring(1);
						}
						return oldMatcher.isCandidateMatchingPrefix(
								strippedName, prefix);
					}
				};
				context.setMatcher(newMatcher);
				String displayText = "Name of "
						+ model.getClass().getSimpleName().replace("Impl", "");
				String proposalText = "Name";
				ICompletionProposal proposal = createCompletionProposal(
						proposalText, displayText, labelProvider.getImage(model) , context);
				if (proposal instanceof ConfigurableCompletionProposal) {
					ConfigurableCompletionProposal configurable = (ConfigurableCompletionProposal) proposal;
					configurable.setSelectionStart(configurable
							.getReplacementOffset());
					configurable.setSelectionLength(proposalText.length());
					configurable.setAutoInsertable(false);
					configurable.setSimpleLinkedMode(context.getViewer(), '\t',
							' ');
				}
				acceptor.accept(proposal);
			} finally {
				context.setMatcher(oldMatcher);
			}
		}
	}
}
